<?php
// auto-generated by sfPropelCrud
// date: 2009/01/01 18:26:05
?>
<?php

/**
 * tag actions.
 *
 * @package    sf_sandbox
 * @subpackage tag
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class tagActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('tag', 'list');
  }

  public function executeList()
  {
    $this->tags = TagPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $c = new Criteria();
    $c->add(TagPeer::STRIPPED_TAG, $this->getRequestParameter('stripped_tag'));
    $this->tag = TagPeer::doSelectOne($c);
    
    $this->forward404Unless($this->tag);
   
    $counts = UserToTagPeer::getCountOfLovers($this->tag->getId());
    
    $this->lovers = array();
    if ( sizeof($counts) )
    {
      $this->lovers = UserPeer::getLovers($counts, $this->tag->getID());
    }
    
    $response = $this->getContext()->getResponse();
    $response->addJavascript('tools');
    $this->comments = CommentPeer::getCommentsJoinUserWithDepth($this->tag->getId());
    
    $this->token = myTools::generate_random_key();
    $this->setFlash('token', $this->token);
  }
  
  public function executeSearch()
  {
    if ( $this->getRequest()->getMethod() != sfRequest::POST ) 
    {
      //redirect get requests
      $this->forward404();
    } 
    
    $this->search = $this->getRequestParameter('search');
    
    $c = new Criteria();
    $c->add(TagPeer::TAG, $this->search);
    $tag = TagPeer::doSelectOne($c);
    if ( $tag )
    {
      $this->redirect('@tag?stripped_tag=' . $tag->getStrippedTag());
    }
    
    $conn = Propel::getConnection();
    $query = 'SELECT ' . TagPeer::TAG . ', ' . TagPeer::STRIPPED_TAG . ' FROM ' . TagPeer::TABLE_NAME . ' 
                WHERE ' . TagPeer::TAG . ' SOUNDS LIKE ? 
                LIMIT ?;';
              
    $stmt = $conn->prepareStatement($query);
    $stmt->setString(1, $this->search);
    $stmt->setInt(2, 20);
    $rs = $stmt->executeQuery();

    $this->sounds = array();
    while ( $rs->next() ) 
    {
      $this->sounds[] = array('tag' => $rs->getString('TAG'),
                              'stripped_tag' => $rs->getString('STRIPPED_TAG'));
    }
  }
  
  public function executeAdd()
  {
    if ( $this->getRequest()->getMethod() != sfRequest::GET ) 
    {
      //redirect get requests
      $this->forward404();
    }
    
    $c = new Criteria();
    $c->add(TagPeer::TAG, $this->getRequestParameter('search'));
    $search = TagPeer::doSelectOne($c);
    if ( $search )
    {
      $this->redirect('@tag?stripped_tag=' . $search->getStrippedTag());
    }

    $tag = new Tag();
    $tag->setTag($this->getRequestParameter('search'));
    $tag->setCreatedBy($this->getUser()->getSubscriberId());
    $tag->save();
    
    $user_tag = new UserToTag();
    $user_tag->setUser($this->getUser()->getSubscriber());
    $user_tag->setTag($tag);
    $user_tag->setLove($this->getRequestParameter('loves'));
    $user_tag->save();
    
    $this->redirect('@tag?stripped_tag=' . $tag->getStrippedTag());
    return sfView::NONE;
  }
  
  public function handleErrorSearch()
  {
    $this->search = $this->getRequestParameter('search');
  }
  
}
